{"0": {
    "doc": "About",
    "title": "About",
    "content": "This concept is created by “DecentralizedGenealogy”. Visit them at GitHub . All content in this repository may be used under an Apache 2.0 license. ",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Motivation",
    "title": "Motivation",
    "content": "# Overview Think about following user stories: --- As a genealogist I want to store all my research data in a trusted environment (like my own workstation computer or a server only I myself can access) so I can be sure that no unauthorized person or profit oriented organization can access and use my data without my full consent. --- As a genealogist I want to share data with other genealogists doing research about the same people so we can collaborate in our research and the same research has not to be repeated by several people. --- Starting with these I came to following concept: There is a need for - some cool software to manage the data (as there is much already present, paid and free) - an algorithm to find and bind duplicate trees at between software instances The software itself is a problem already solved by many people and the complexity is reasonable. To find other instances having overlapping trees we need to: 1. get a starting point for communication to other instances 2. share a sample to match against 3. define some \"levels of trust\" to start sharing and validating the tree overlap and provide a communication entry point (like telling each other the contact email so the users can start mailing each other or even share a phone number and then meet personally 4. bind subtrees together to directly share data added at one instance to 1.: a central service is necessary here because this seems the easiest way to catch instances interested in sharing data. They only have to call this service to send samples or get some samples to look for a match. to 2.: As a central service should not have \"real\" data of people matching should be based on a hashed value. As names may be mistyped or just typed differently on different countries this can not be used. Dates of birth should be a better candidate. If one takes its birthdate, the birthdays of ones parents, of the grandparents and the great-grandparents (so 15 dates in total) and build a md5 checksum on these dates this should be a strong fingerprint. Only the ID of this entry in the database, the ID of the originating instance and the checksum has to be stored on the central server for some time so other instances can grab that checksum and try to find a matching entry in their own database. If there is a match the instances can start to talk to each other directly. to 3.: two instances may share only few data first so owners of other instances may check if this data seems valid. Two instances may also share checksums over subtrees of the original sample to verify the data really is equal and it is not a collision of the checksum. to 4.: I also had some thoughts here but this can be discussed a lot later. ",
    "url": "http://localhost:4000/motivation",
    "relUrl": "/motivation"
  },"2": {
    "doc": "Technical overview",
    "title": "Technical overview",
    "content": "# Overview Think about following user stories: --- As a genealogist I want to store all my research data in a trusted environment (like my own workstation computer or a server only I myself can access) so I can be sure that no unauthorized person or profit oriented organization can access and use my data without my full consent. --- As a genealogist I want to share data with other genealogists doing research about the same people so we can collaborate in our research and the same research has not to be repeated by several people. --- Starting with these I came to following concept: There is a need for - some cool software to manage the data (as there is much already present, paid and free) - an algorithm to find and bind duplicate trees at between software instances The software itself is a problem already solved by many people and the complexity is reasonable. To find other instances having overlapping trees we need to: 1. get a starting point for communication to other instances 2. share a sample to match against 3. define some \"levels of trust\" to start sharing and validating the tree overlap and provide a communication entry point (like telling each other the contact email so the users can start mailing each other or even share a phone number and then meet personally 4. bind subtrees together to directly share data added at one instance to 1.: a central service is necessary here because this seems the easiest way to catch instances interested in sharing data. They only have to call this service to send samples or get some samples to look for a match. to 2.: As a central service should not have \"real\" data of people matching should be based on a hashed value. As names may be mistyped or just typed differently on different countries this can not be used. Dates of birth should be a better candidate. If one takes its birthdate, the birthdays of ones parents, of the grandparents and the great-grandparents (so 15 dates in total) and build a md5 checksum on these dates this should be a strong fingerprint. Only the ID of this entry in the database, the ID of the originating instance and the checksum has to be stored on the central server for some time so other instances can grab that checksum and try to find a matching entry in their own database. If there is a match the instances can start to talk to each other directly. to 3.: two instances may share only few data first so owners of other instances may check if this data seems valid. Two instances may also share checksums over subtrees of the original sample to verify the data really is equal and it is not a collision of the checksum. to 4.: I also had some thoughts here but this can be discussed a lot later. ",
    "url": "http://localhost:4000/overview",
    "relUrl": "/overview"
  }
}
